diff --git a/docs/gzl-rtn-graph b/docs/gzl-rtn-graph
index 4e6c756..40a7166
--- a/docs/gzl-rtn-graph
+++ b/docs/gzl-rtn-graph
@@ -19,10 +19,9 @@ function escape(str)
   return str:gsub("[\"\\]", "\\%1")
 end

-grammar = parse_grammar(CharStream:new(io.stdin:read("*a")))
-if grammar.rtns:count() ~= 1 then
-  error("This filter can only deal with grammars that have a single nonterminal")
-end
+grammar = Grammar:new()
+grammar:parse_source_string(io.stdin:read("*a"))
+grammar:process()
 for _nonterm, _rtn in grammar.rtns:each() do
   nonterm = _nonterm
   rtn = _rtn
@@ -45,9 +44,6 @@ for state in each(rtn:states()) do
     if fa.is_nonterm(edge_val) then
       outfile:write(string.format('  "%s" -> "%s" [label="<%s>"]\n', tostring(state), tostring(target_state), escape(edge_val.name)))
     else
-      if grammar.attributes.regex_text[edge_val] then
-        edge_val = "/" .. grammar.attributes.regex_text[edge_val] .. "/"
-      end
       outfile:write(string.format('  "%s" -> "%s" [label="%s"]\n', tostring(state), tostring(target_state), escape(edge_val)))
     end
   end
diff --git a/docs/manual.txt b/docs/manual.txt
index 170f44f..eba0d99 100644
--- a/docs/manual.txt
+++ b/docs/manual.txt
@@ -293,6 +293,8 @@ graph is just a single path.

 ["simplerule1.png", "graph 1: assign -> ident \"=\" expr;"]
 gzl-rtn-graph~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ident -> "lit_ident";
+expr -> "lit_expr";
 assign -> ident "=" expr;
 gzl-rtn-graph~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@@ -332,6 +334,11 @@ rule are what you intended.

 ["altrule2.png", "graph for: name -> (fname (mname | minitial) | nickname) surname"]
 gzl-rtn-graph~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+fname -> "lit_fname";
+mname -> "lit_mname";
+minitial -> "lit_minitial";
+nickname -> "lit_nickname";
+surname -> "lit_surname";
 name -> (fname (mname | minitial) | nickname) surname;
 gzl-rtn-graph~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@@ -382,6 +389,8 @@ object   -> "{" (string ":" value) *(",") "}";

 ["reprule1.png", "Graph for the above JSON object expression."]
 gzl-rtn-graph~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+string -> "lit_string";
+value -> "lit_value";
 object   -> "{" (string ":" value) *(",") "}";
 gzl-rtn-graph~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@@ -1045,6 +1054,8 @@ same JSON rule as the first example:

 ["json.png", "Gazelle's graph of the JSON rule above"]
 gzl-rtn-graph~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+string -> "lit_string";
+value -> "lit_value";
 object -> "{" (string ":" value) *(,) "}";
 gzl-rtn-graph~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@@ -1099,6 +1110,8 @@ the input imply what transitions.  For example, consider the rule:

 ["hardrule1.png", "graph 3: word -> numbers | letters;"]
 gzl-rtn-graph~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+numbers -> "lit_numbers";
+letters -> "lit_letters";
 word -> numbers | letters;
 gzl-rtn-graph~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@@ -1113,6 +1126,7 @@ in a final state that has transitions out of it?  Consider this rule:

 ["hardrule2.png", "graph 3: sentence -> word*;"]
 gzl-rtn-graph~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+word -> "lit_word";
 sentence -> word*;
 gzl-rtn-graph~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

