diff --git a/utilities/srlua.c b/utilities/srlua.c
index b67e625..9203c41 100644
--- a/utilities/srlua.c
+++ b/utilities/srlua.c
@@ -2,7 +2,7 @@
 * srlua.c
 * Lua interpreter for self-running programs
 * Luiz Henrique de Figueiredo <lhf@tecgraf.puc-rio.br>
-* 28 Apr 2006 23:01:50
+* 20 Mar 2009 21:05:59
 * This code is hereby placed in the public domain.
 */
 
@@ -53,7 +53,7 @@ static void load(lua_State *L, const char *name)
  if (memcmp(t.sig,GLUESIG,GLUELEN)!=0) luaL_error(L,"no Lua program found in %s",name);
  if (fseek(f,t.size1,SEEK_SET)!=0) cannot("seek");
  S.f=f; S.size=t.size2;
- if (lua_load(L,myget,&S,name)!=0) lua_error(L);
+ if (lua_load(L,myget,&S,"=")!=0) lua_error(L);
  fclose(f);
 }
 
@@ -61,21 +61,19 @@ static int pmain(lua_State *L)
 {
  char **argv=lua_touserdata(L,1);
  int i;
+ lua_gc(L,LUA_GCSTOP,0);
  luaL_openlibs(L);
+ lua_gc(L,LUA_GCRESTART,0);
  load(L,argv[0]);
- lua_newtable(L);
+ for (i=1; argv[i]; i++) ; /* count */
+ lua_createtable(L,i-1,1);
  for (i=0; argv[i]; i++)
  {
   lua_pushstring(L,argv[i]);
   lua_rawseti(L,-2,i);
  }
- lua_pushliteral(L,"n");
- lua_pushnumber(L,i-1);
- lua_rawset(L,-3);
  lua_setglobal(L,"arg");
- lua_pushstring(L,argv[0]);
- lua_setglobal(L,"_PROGNAME");
- luaL_checkstack(L, i, "too many arguments to script");
+ luaL_checkstack(L,i-1,"too many arguments to script");
  for (i=1; argv[i]; i++)
  {
   lua_pushstring(L,argv[i]);
@@ -84,31 +82,27 @@ static int pmain(lua_State *L)
  return 0;
 }
 
+static void fatal(const char* progname, const char* message)
+{
 #ifdef _WIN32
-#define report(s) MessageBox(NULL,s,argv[0], MB_ICONERROR | MB_OK)
+ MessageBox(NULL,message,progname,MB_ICONERROR | MB_OK);
 #else
-#define report(s) fprintf(stderr,"%s: %s\n",argv[0],s)
+ fprintf(stderr,"%s: %s\n",progname,message);
 #endif
+ exit(EXIT_FAILURE);
+}
 
 int main(int argc, char *argv[])
 {
  lua_State *L;
 #ifdef _WIN32
  char name[MAX_PATH];
- if (GetModuleFileName(NULL,name,sizeof(name))==0)
- {
-  report("cannot locate this executable");
-  return EXIT_FAILURE;
- }
- argv[0]=name;
+ argv[0]= GetModuleFileName(NULL,name,sizeof(name)) ? name : NULL;
 #endif
+ if (argv[0]==NULL) fatal("srlua","cannot locate this executable");
  L=lua_open();
- if (L==NULL)
- {
-  report("not enough memory for state");
-  return EXIT_FAILURE;
- }
- if (lua_cpcall(L,pmain,argv)) report(lua_tostring(L,-1));
+ if (L==NULL) fatal(argv[0],"not enough memory for state");
+ if (lua_cpcall(L,pmain,argv)) fatal(argv[0],lua_tostring(L,-1));
  lua_close(L);
  return EXIT_SUCCESS;
 }
